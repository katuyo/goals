plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version("${kotlinVersion}")
    id("org.springframework.boot") version("${springBootVersion}")
    id("io.spring.dependency-management") version("${springDepedencyVersion}")
}
dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
    }
}
dependencies {
    compile(project(":goals-spec"))
//    compile("javax.servlet-api:${servletVersion}")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.0-rc2")
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions:1.1.0")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
   // implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.4.1")

    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery")
    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config")
    implementation("com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel")

    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-undertow")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")

    implementation("com.google.guava:guava:${guavaVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
//    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("io.projectreactor:reactor-test")
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_15
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_15
}