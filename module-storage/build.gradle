plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version("${kotlinVersion}")
    id("org.jetbrains.kotlin.plugin.spring") version("${kotlinVersion}")
    id("org.flywaydb.flyway") version("${flywayVersion}")
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly("org.featx.spec:spec:${featxSpecVersion}")
//    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions:1.0.2.RELEASE")
    implementation("com.google.guava:guava:${guavaVersion}")
//    implementation("org.jetbrains.kotlin:kotlin-reflect")
//    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
//    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.3.5")

//    implementation("org.springframework.boot:spring-boot-starter-data-r2dbc:${springBootVersion}")
//    implementation("org.springframework.boot:spring-boot-starter-data-elasticsearch:${springBootVersion}")

//    implementation("org.apache.rocketmq:rocketmq-spring-boot-starter:${springRocketMqVersion}")
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${springMybatisVersion}")
//    runtimeOnly("dev.miku:r2dbc-mysql")
    implementation("com.zaxxer:HikariCP:${hikariCPVersion}")
    runtimeOnly("mysql:mysql-connector-java:${mysqlVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("io.projectreactor:reactor-test:${reactorVersion}")
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_14
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_14
}

flyway {
    url = ""
    locations = ["db/migration"]
    user = "spring-cloud"
    password = ""
    schemas = ["spring-cloud"]
}